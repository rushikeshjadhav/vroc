From e6e5f8f1267de4f310415231b3434fce2d25f02a Mon Sep 17 00:00:00 2001
From: Jes Sorensen <Jes.Sorensen@gmail.com>
Date: Wed, 5 Apr 2017 15:20:52 -0400
Subject: [RHEL7.5 PATCH 055/169] Build: Stop bothering about supporting md
 driver older than 0.90.00

The kernel has been stuck at md driver version 0.90.03 for at least  a
decade. No point in continuing to support the older API.

Signed-off-by: Jes Sorensen <Jes.Sorensen@gmail.com>
---
 Build.c | 187 ++++++++++++++++++++++++----------------------------------------
 1 file changed, 69 insertions(+), 118 deletions(-)

diff --git a/Build.c b/Build.c
index 691dd6f..11ba12f 100644
--- a/Build.c
+++ b/Build.c
@@ -39,13 +39,8 @@ int Build(char *mddev, struct mddev_dev *devlist,
 	 * geometry is 0xpp00cc
 	 * where pp is personality: 1==linear, 2=raid0
 	 * cc = chunk size factor: 0==4k, 1==8k etc.
-	 *
-	 * For md_version >= 0.90.0 we call
-	 * SET_ARRAY_INFO,  ADD_NEW_DISK, RUN_ARRAY
-	 *
 	 */
 	int i;
-	int vers;
 	struct stat stb;
 	int subdevs = 0, missing_disks = 0;
 	struct mddev_dev *dv;
@@ -55,6 +50,8 @@ int Build(char *mddev, struct mddev_dev *devlist,
 	char chosen_name[1024];
 	int uuid[4] = {0,0,0,0};
 	struct map_ent *map = NULL;
+	mdu_array_info_t array;
+	mdu_param_t param; /* not used by syscall */
 
 	if (s->level == UnSet) {
 		pr_err("a RAID level is needed to Build an array.\n");
@@ -122,39 +119,30 @@ int Build(char *mddev, struct mddev_dev *devlist,
 	map_update(&map, fd2devnm(mdfd), "none", uuid, chosen_name);
 	map_unlock(&map);
 
-	vers = md_get_version(mdfd);
-
-	/* looks Ok, go for it */
-	if (vers >= 9000) {
-		mdu_array_info_t array;
-		array.level = s->level;
-		if (s->size == MAX_SIZE)
-			s->size = 0;
-		array.size = s->size;
-		array.nr_disks = s->raiddisks;
-		array.raid_disks = s->raiddisks;
-		array.md_minor = 0;
-		if (fstat(mdfd, &stb)==0)
-			array.md_minor = minor(stb.st_rdev);
-		array.not_persistent = 1;
-		array.state = 0; /* not clean, but no errors */
-		if (s->assume_clean)
-			array.state |= 1;
-		array.active_disks = s->raiddisks - missing_disks;
-		array.working_disks = s->raiddisks - missing_disks;
-		array.spare_disks = 0;
-		array.failed_disks = missing_disks;
-		if (s->chunk == 0 && (s->level==0 || s->level==LEVEL_LINEAR))
-			s->chunk = 64;
-		array.chunk_size = s->chunk*1024;
-		array.layout = s->layout;
-		if (md_set_array_info(mdfd, &array)) {
-			pr_err("md_set_array_info() failed for %s: %s\n",
-				mddev, strerror(errno));
-			goto abort;
-		}
-	} else if (s->bitmap_file) {
-		pr_err("bitmaps not supported with this kernel\n");
+	array.level = s->level;
+	if (s->size == MAX_SIZE)
+		s->size = 0;
+	array.size = s->size;
+	array.nr_disks = s->raiddisks;
+	array.raid_disks = s->raiddisks;
+	array.md_minor = 0;
+	if (fstat(mdfd, &stb) == 0)
+		array.md_minor = minor(stb.st_rdev);
+	array.not_persistent = 1;
+	array.state = 0; /* not clean, but no errors */
+	if (s->assume_clean)
+		array.state |= 1;
+	array.active_disks = s->raiddisks - missing_disks;
+	array.working_disks = s->raiddisks - missing_disks;
+	array.spare_disks = 0;
+	array.failed_disks = missing_disks;
+	if (s->chunk == 0 && (s->level==0 || s->level==LEVEL_LINEAR))
+		s->chunk = 64;
+	array.chunk_size = s->chunk*1024;
+	array.layout = s->layout;
+	if (md_set_array_info(mdfd, &array)) {
+		pr_err("md_set_array_info() failed for %s: %s\n",
+		       mddev, strerror(errno));
 		goto abort;
 	}
 
@@ -167,8 +155,10 @@ int Build(char *mddev, struct mddev_dev *devlist,
 	}
 	/* now add the devices */
 	for ((i=0), (dv = devlist) ; dv ; i++, dv=dv->next) {
+		mdu_disk_info_t disk;
 		unsigned long long dsize;
 		int fd;
+
 		if (strcmp("missing", dv->devname) == 0)
 			continue;
 		if (stat(dv->devname, &stb)) {
@@ -191,94 +181,58 @@ int Build(char *mddev, struct mddev_dev *devlist,
 		    (s->size == 0 || s->size == MAX_SIZE || dsize < s->size))
 				s->size = dsize;
 		close(fd);
-		if (vers >= 9000) {
-			mdu_disk_info_t disk;
-			disk.number = i;
-			disk.raid_disk = i;
-			disk.state = (1<<MD_DISK_SYNC) | (1<<MD_DISK_ACTIVE);
-			if (dv->writemostly == FlagSet)
-				disk.state |= 1<<MD_DISK_WRITEMOSTLY;
-			disk.major = major(stb.st_rdev);
-			disk.minor = minor(stb.st_rdev);
-			if (ioctl(mdfd, ADD_NEW_DISK, &disk)) {
-				pr_err("ADD_NEW_DISK failed for %s: %s\n",
-					dv->devname, strerror(errno));
-				goto abort;
-			}
-		} else {
-			if (ioctl(mdfd, REGISTER_DEV, &stb.st_rdev)) {
-				pr_err("REGISTER_DEV failed for %s: %s.\n",
-					dv->devname, strerror(errno));
-				goto abort;
-			}
+		disk.number = i;
+		disk.raid_disk = i;
+		disk.state = (1<<MD_DISK_SYNC) | (1<<MD_DISK_ACTIVE);
+		if (dv->writemostly == FlagSet)
+			disk.state |= 1<<MD_DISK_WRITEMOSTLY;
+		disk.major = major(stb.st_rdev);
+		disk.minor = minor(stb.st_rdev);
+		if (ioctl(mdfd, ADD_NEW_DISK, &disk)) {
+			pr_err("ADD_NEW_DISK failed for %s: %s\n",
+			       dv->devname, strerror(errno));
+			goto abort;
 		}
 	}
 	/* now to start it */
-	if (vers >= 9000) {
-		mdu_param_t param; /* not used by syscall */
-		if (s->bitmap_file) {
-			bitmap_fd = open(s->bitmap_file, O_RDWR);
-			if (bitmap_fd < 0) {
-				int major = BITMAP_MAJOR_HI;
+	if (s->bitmap_file) {
+		bitmap_fd = open(s->bitmap_file, O_RDWR);
+		if (bitmap_fd < 0) {
+			int major = BITMAP_MAJOR_HI;
 #if 0
-				if (s->bitmap_chunk == UnSet) {
-					pr_err("%s cannot be openned.",
-						s->bitmap_file);
-					goto abort;
-				}
-#endif
-				if (vers < 9003) {
-					major = BITMAP_MAJOR_HOSTENDIAN;
-#ifdef __BIG_ENDIAN
-					pr_err("Warning - bitmaps created on this kernel are not portable\n"
-						"  between different architectures.  Consider upgrading the Linux kernel.\n");
+			if (s->bitmap_chunk == UnSet) {
+				pr_err("%s cannot be openned.", s->bitmap_file);
+				goto abort;
+			}
 #endif
-				}
-				bitmapsize = s->size>>9; /* FIXME wrong for RAID10 */
-				if (CreateBitmap(s->bitmap_file, 1, NULL, s->bitmap_chunk,
-						 c->delay, s->write_behind, bitmapsize, major)) {
-					goto abort;
-				}
-				bitmap_fd = open(s->bitmap_file, O_RDWR);
-				if (bitmap_fd < 0) {
-					pr_err("%s cannot be openned.",
-						s->bitmap_file);
-					goto abort;
-				}
+			bitmapsize = s->size >> 9; /* FIXME wrong for RAID10 */
+			if (CreateBitmap(s->bitmap_file, 1, NULL,
+					 s->bitmap_chunk, c->delay,
+					 s->write_behind, bitmapsize, major)) {
+				goto abort;
 			}
-			if (bitmap_fd >= 0) {
-				if (ioctl(mdfd, SET_BITMAP_FILE, bitmap_fd) < 0) {
-					pr_err("Cannot set bitmap file for %s: %s\n",
-						mddev, strerror(errno));
-					goto abort;
-				}
+			bitmap_fd = open(s->bitmap_file, O_RDWR);
+			if (bitmap_fd < 0) {
+				pr_err("%s cannot be openned.", s->bitmap_file);
+				goto abort;
 			}
 		}
-		if (ioctl(mdfd, RUN_ARRAY, &param)) {
-			pr_err("RUN_ARRAY failed: %s\n",
-				strerror(errno));
-			if (s->chunk & (s->chunk-1)) {
-				cont_err("Problem may be that chunk size is not a power of 2\n");
+		if (bitmap_fd >= 0) {
+			if (ioctl(mdfd, SET_BITMAP_FILE, bitmap_fd) < 0) {
+				pr_err("Cannot set bitmap file for %s: %s\n",
+				       mddev, strerror(errno));
+				goto abort;
 			}
-			goto abort;
-		}
-	} else {
-		unsigned long arg;
-		arg=0;
-		while (s->chunk > 4096) {
-			arg++;
-			s->chunk >>= 1;
 		}
-		if (s->level == 0)
-			arg |= 0x20000;
-		else
-			arg |= 0x10000;
-		if (ioctl(mdfd, START_MD, arg)) {
-			pr_err("START_MD failed: %s\n",
-				strerror(errno));
-			goto abort;
+	}
+	if (ioctl(mdfd, RUN_ARRAY, &param)) {
+		pr_err("RUN_ARRAY failed: %s\n", strerror(errno));
+		if (s->chunk & (s->chunk - 1)) {
+			cont_err("Problem may be that chunk size is not a power of 2\n");
 		}
+		goto abort;
 	}
+
 	if (c->verbose >= 0)
 		pr_err("array %s built and started.\n",
 			mddev);
@@ -287,10 +241,7 @@ int Build(char *mddev, struct mddev_dev *devlist,
 	return 0;
 
  abort:
-	if (vers >= 9000)
-	    ioctl(mdfd, STOP_ARRAY, 0);
-	else
-	    ioctl(mdfd, STOP_MD, 0);
+	ioctl(mdfd, STOP_ARRAY, 0);
 	close(mdfd);
 	return 1;
 }
-- 
2.7.4

